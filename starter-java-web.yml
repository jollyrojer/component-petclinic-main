application:
  configuration:
    configuration.gitFork:     qubell
    configuration.gitBranch:   master
    configuration.clusterSize: 1
    compute.hardwareId: "c3.large"
    compute.imageId:    "ami-26971e4e"
    compute.login:      "root"
    compute.locationId: "us-east-1"
  interfaces:
    configuration:
      "*": "bind(main#input.*)"
    compute:
      "*": "bind(db#compute.*, lb#compute.*, cluster.app#compute.*)"
    petclinic:
      url: "bind(lb#haproxy.entry-url)"
  bindings:
    - [main, db]
    - [main, cluster]
    - [main, cluster.app]
    - [lb, cluster.app]
  components:
    main:
      type: workflow.Instance
      interfaces:
        input:
          gitFork:     { type: configuration(string), name: GIT fork   }
          gitBranch:   { type: configuration(string), name: GIT branch   }
          clusterSize: { type: configuration(int),    name: Cluster Size }
        db:
          db-user:             consume-signal(string)
          db-user-password:    consume-signal(string)
          db-driver:           consume-signal(string)
          db-validation-query: consume-signal(string)
          db-connection-url:   consume-signal(string)
        scaler:
          set-quantity: send-command(int quantity)
        actions:
          update: receive-command()
        result:
          scm-provider:  publish-signal(string)
          scm-uri:       publish-signal(string)
          scm-branch:    publish-signal(string)
          lib-uri:       publish-signal(list<string>)
          context-nodes: publish-signal(object)
      required: [ db ]
      configuration:
        configuration.triggers:
          db.db-user:             update
          db.db-user-password:    update
          db.db-driver:           update
          db.db-validation-query: update
          db.db-connection-url:   update
          input.gitFork:          update
          input.gitBranch:        update
          input.clusterSize:      update
        configuration.propagateStatus: [ update ]
        configuration.workflows:
          update: &update
            steps:
              - get-signals:
                  action: getSignals
                  output:
                    signals: result
              - scale:
                  action: scaler.set-quantity
                  parameters:
                    quantity: "{$.clusterSize}"
            return:
              scm-provider: { value: "git" }
              scm-uri:      { value: "git://github.com/{$.gitFork}/starter-java-web.git" }
              scm-branch:   { value: "{$.gitBranch}" }
              lib-uri:      { value: ["http://repo1.maven.org/maven2/org/apache/tomcat/dbcp/6.0.26/dbcp-6.0.26.jar", "http://repo1.maven.org/maven2/mysql/mysql-connector-java/5.1.6/mysql-connector-java-5.1.6.jar", "https://dl.dropboxusercontent.com/u/250836/ojdbc6.jar"] }
              context-nodes:
                value:
                  - Environments:
                      "name": "appEnvironment"
                      "value": "_default"
                      "type": "java.lang.String"
                      "override": "false"
                  - Resource:
                      "name": "jdbc/datasource"
                      "auth": "Container"
                      "type": "javax.sql.DataSource"
                      "maxActive": "8"
                      "maxIdle": "8"
                      "maxWait": "-1"
                      "username": "{$.signals.db.db-user}"
                      "password": "{$.signals.db.db-user-password}"
                      "driverClassName": "{$.signals.db.db-driver}"
                      "url": "{$.signals.db.db-connection-url}"
                      "validationQuery": "{$.signals.db.db-validation-query}"
                      "testOnReturn": "true"
                      "testWhileIdle": "true"
          launch: *update
    db:
      type: reference.Submodule
      configuration:
        __locator.application-id:         "Database"
        configuration.db-user:            "petclinic"
        configuration.db-user-password:   "petclinic"
        configuration.db-user-privileges: [ all ]
        configuration.sql-url:            ["https://raw.github.com/qubell-bazaar/component-petclinic/master/sql/petclinic-mysql-schema.sql", "https://raw.github.com/qubell-bazaar/component-petclinic/master/sql/petclinic-mysql-dataload.sql"]
      interfaces:
        compute: &compute
          imageId:         configuration(string)
          hardwareId:      configuration(string)
          locationId:      configuration(string)
          login:           configuration(string)
        mysql:
          db-host:             { type: publish-signal(string), name: Database host          }
          db-port:             { type: publish-signal(int),    name: Database listen port   }
          db-root-user:        { type: publish-signal(string), name: Database root user     }
          db-root-password:    { type: publish-signal(string), name: Database root password }
          db-user:             { type: publish-signal(string), name: Database user          }
          db-user-password:    { type: publish-signal(string), name: Database user password }
          db-driver:           { type: publish-signal(string), name: JDBC driver            }
          db-validation-query: { type: publish-signal(string), name: Validation SQL query   }
          db-connection-url:   { type: publish-signal(string), name: JDBC url               }
        configuration:
          db-port:            { type: configuration(int),          name: Database listen port     }
          db-root-password:   { type: configuration(string),       name: Database root password   }
          db-user:            { type: configuration(string),       name: Database user name       }
          db-user-password:   { type: configuration(string),       name: Database user password   }
          db-user-privileges: { type: configuration(list<string>), name: Database user privileges }
          recipe-url:         { type: configuration(string),       name: Cookbooks url            }
          sql-url:            { type: configuration(list<string>), name: Schema SQL urls          }
    lb:
      type: reference.Submodule
      configuration:
        __locator.application-id: "Load Balancer"
      interfaces:
        compute: *compute
        servers:
          app-host: consume-signal(string)
          app-port: consume-signal(int)
        haproxy:
          stats-url: { type: publish-signal(string), name: Haproxy statistics }
          entry-url: { type: publish-signal(string), name: Entry url          }
    cluster:
      type: composite.Scaler
      components:
        app:
          type: reference.Submodule
          configuration:
            __locator.application-id: "Application Server"
          interfaces:
            source:
              scm-provider:  consume-signal(string)
              scm-uri:       consume-signal(string)
              scm-branch:    consume-signal(string)
              lib-uri:       consume-signal(list<string>)
              context-nodes: consume-signal(object)
            tomcat:
              app-host: publish-signal(string)
              app-port: publish-signal(int)
            configuration:
              app-port:     { type: configuration(int),          name: Tomcat listen port }
              java-opts:    { type: configuration(string),       name: JAVA_OPTS          }
              recipe-url:   { type: configuration(string),       name: Cookbooks url      }
            compute: *compute
          required: [ source ]
