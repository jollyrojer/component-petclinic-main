application:
  configuration:
    input.lb-bucket: http://roundrobin:80
    input.app-fork: qubell
    input.app-branch: HEAD #red, master
    input.app-quantity: 1

  bindings:
    - [main.workflow, Database]
    - [main.workflow, AppServer]
    - [main.workflow, LoadBalancer]

  interfaces:
    input:
      app-fork: "bind(main.workflow#input.app-fork)"
      app-branch: "bind(main.workflow#input.app-branch)"
      lb-bucket: "bind(main.workflow#input.lb-bucket)"
      app-quantity: "bind(AppServer#input.quantity)"
    app-meta:
      application-pic: "bind(metadata#output.application-pic)"
    endpoints:
      lb: "bind(LoadBalancer#haproxy.lb-stats)"
      app: "bind(AppServer#tomcat.app-hosts)"
      db: "bind(Database#mysql.dbms)"
      entry: "bind(main.workflow#result.entry-url)"

  components:
    metadata:
      type: cobalt.common.Constants
      interfaces:
        output:
          application-pic:
            type: publish-signal(map<string, object>)
            name: ""
      configuration:
        configuration.values:
          output.application-pic:
            large: "https://s3.amazonaws.com/qubell-images/spring.png"
            small: "https://s3.amazonaws.com/qubell-images/spring_small.png"
            small-height: 64
    main:
      components:
        workflow:
          type: workflow.Instance
          interfaces:
            input:
              scm-provider:
                  type: configuration(string)
              app-fork:
                  type: configuration(string)
                  name: Git fork
              app-branch:
                  type: configuration(string)
                  name: Git branch
              lb-bucket:
                  type: configuration(string)
                  name: LoadBalancer bucket
              #as constants
              db-sql-url:
                  type: configuration(list<string>)
              db-user:
                  type: configuration(string)
              db-password:
                  type: configuration(string)
              privileges:
                  type: configuration(list<string>)
              lib-uri:
                  type: configuration(list<string>)
            mysql:
              dbms:
                  type: consume-signal(object)
              db-host:
                  type: consume-signal(string)
              db-port:
                  type: consume-signal(int)
              schema:
                  type: send-command(string db-user, string db-user-password, list<string> db-user-privileges => object connection)
              file-query:
                  type: send-command(object connection, list<string> sql-url)
            tomcat:
              build-app:
                  type: send-command(string scm-provider, string git-uri, string app-branch => list<string> wars)
              deploy-libs:
                  type: send-command(list<string> lib-uri)
              deploy-war:
                  type: send-command(string uri, string path, object context-attrs, object context-nodes)
              app-hosts:
                  type: consume-signal(list<string>)
              app-port:
                  type: consume-signal(int)
            haproxy:
              add-servers:
                  type: send-command(list<string> app-hosts, int app-port, string lb-bucket => string entry-url)
              reconfigure-servers:
                  type: send-command(list<string> app-hosts, int app-port, string lb-bucket)
            result:
              entry-url:
                  type: publish-signal(string)
                  name: PetClinic
              mysql-con:
                  type: publish-signal(object)

          required: [mysql, tomcat, haproxy]
          configuration:
            #Oracle
            #input.db-sql-url: ["https://dl.dropboxusercontent.com/u/250836/petclinic-oracle-schema.sql", "https://dl.dropboxusercontent.com/u/250836/petclinic-oracle-dataload.sql"]
            #MySQL
            input.db-sql-url: ["https://raw.github.com/qubell-bazaar/component-petclinic/master/sql/petclinic-mysql-schema.sql", "https://raw.github.com/qubell-bazaar/component-petclinic/master/sql/petclinic-mysql-dataload.sql"]
            input.db-user: petclinic #const
            input.db-password: petclinic #const
            input.privileges: ["all"] #const
            input.scm-provider: git #const
            input.lib-uri: ["http://repo1.maven.org/maven2/org/apache/tomcat/dbcp/6.0.26/dbcp-6.0.26.jar", "http://repo1.maven.org/maven2/mysql/mysql-connector-java/5.1.6/mysql-connector-java-5.1.6.jar", "https://s3.amazonaws.com/qubell-starter-kit-artifacts/petclinic-deps/ojdbc6.jar"]

            configuration.triggers:
              tomcat.app-hosts: app-scale
              input.app-fork: rebuild-app
              input.app-branch: rebuild-app

            configuration.propagateStatus: [ app-scale, rebuild-app ]

            configuration.workflows:
              launch:
                steps:
                  - get-env-props:
                      action: getEnvironmentProperties
                      phase: get-env-props
                      output:
                        props: result
                  - manage-schema:
                      action: mysql.schema
                      precedingPhases: [ get-env-props ]
                      parameters:
                        commandCallTimeout: 10 minutes
                        db-user: "{$.db-user}"
                        db-user-password: "{$.db-password}"
                        db-user-privileges: "{$.privileges}"
                      output:
                        con: connection
                  - upload-sql:
                      action: mysql.file-query
                      precedingPhases: [ manage-schema ]
                      parameters:
                        commandCallTimeout: 5 minutes
                        connection: "{$.con}"
                        sql-url: "{$.db-sql-url}"
                  - build-app:
                      action: tomcat.build-app
                      precedingPhases: [ get-env-props ]
                      parameters:
                        commandCallTimeout: 10 minutes
                        scm-provider: "{$.scm-provider}"
                        git-uri: "git://github.com/{$.app-fork}/starter-java-web.git"
                        app-branch: "{$.app-branch}"
                      output:
                        warlist: wars
                  - deploy-libs:
                      action: tomcat.deploy-libs
                      phase: deploy-libs
                      precedingPhases: [ get-env-props, build-app ]
                      parameters:
                        commandCallTimeout: 5 minutes
                        lib-uri: "{$.lib-uri}"
                  - deploy-war:
                      action: tomcat.deploy-war
                      phase: deploy-war
                      precedingPhases: [ upload-sql, build-app, deploy-libs ]
                      parameters:
                        commandCallTimeout: 5 minutes
                        uri: "{$.warlist[0]}"
                        path: "/"
                        context-attrs: {
                          "docBase": "{$.warlist[0]}",
                          "path": "/",
                          "debug": "5",
                          "reloadable": "true",
                          "crossContext": "true",
                          "allowLinking": "true"
                        }
                        context-nodes:
                          - Environments: {
                              "name": "appEnvironment",
                              "value": "_default",
                              "type": "java.lang.String",
                              "override": "false"
                          }
                          - Resource: {
                              "name": "jdbc/datasource",
                              "auth": "Container",
                              "type": "{$.con.db-dstype}",
                              "maxActive": "8",
                              "maxIdle": "8",
                              "maxWait": "-1",
                              "username": "{$.con.db-user}",
                              "password": "{$.con.db-user-password}",
                              "driverClassName": "{$.con.db-driver}",
                              "url": "{$.con.connection-url}",
                              "validationQuery": "{$.con.validation-query}",
                              "testOnReturn": "true",
                              "testWhileIdle": "true"
                          }

                  - lb-add-server:
                      action: haproxy.add-servers
                      precedingPhases: [ deploy-war ]
                      phase: lb-add-server
                      parameters:
                        commandCallTimeout: 5 minutes
                        app-hosts: "{$.props.tomcat.app-hosts}"
                        app-port: "{$.props.tomcat.app-port}"
                        lb-bucket: "http://roundrobin:80/"
                      output:
                        result-lb: entry-url
                          #todo move lb-bucket to launch param
                return:
                  entry-url:
                    value: "{$.result-lb}"
                  mysql-con:
                    value: "{$.con}"
              app-scale:
                steps:
                  - get-env-props:
                      action: getEnvironmentProperties
                      phase: get-env-props
                      output:
                        props: result
                  - build-app:
                      action: tomcat.build-app
                      precedingPhases: [ get-env-props ]
                      parameters:
                        commandCallTimeout: 10 minutes
                        scm-provider: "{$.scm-provider}"
                        git-uri: "git://github.com/{$.app-fork}/starter-java-web.git"
                        app-branch: "{$.app-branch}"
                      output:
                        warlist: wars
                  - deploy-libs:
                      action: tomcat.deploy-libs
                      phase: deploy-libs
                      precedingPhases: [ get-env-props, build-app ]
                      parameters:
                        commandCallTimeout: 5 minutes
                        lib-uri: "{$.lib-uri}"
                  - deploy-war:
                      action: tomcat.deploy-war
                      phase: deploy-war
                      precedingPhases: [ build-app, deploy-libs ]
                      parameters:
                        commandCallTimeout: 5 minutes
                        uri: "{$.warlist[0]}"
                        path: "/"
                        context-attrs: {
                          "docBase": "{$.warlist[0]}",
                          "path": "/",
                          "debug": "5",
                          "reloadable": "true",
                          "crossContext": "true",
                          "allowLinking": "true"
                        }
                        context-nodes:
                          - Environments: {
                              "name": "appEnvironment",
                              "value": "_default",
                              "type": "java.lang.String",
                              "override": "false"
                          }
                          - Resource: {
                              "name": "jdbc/datasource",
                              "auth": "Container",
                              "type": "{$.mysql-con.db-dstype}",
                              "maxActive": "8",
                              "maxIdle": "8",
                              "maxWait": "-1",
                              "username": "{$.mysql-con.db-user}",
                              "password": "{$.mysql-con.db-user-password}",
                              "driverClassName": "{$.mysql-con.db-driver}",
                              "url": "{$.mysql-con.connection-url}",
                              "validationQuery": "{$.mysql-con.validation-query}",
                              "testOnReturn": "true",
                              "testWhileIdle": "true"
                          }

                  - lb-reconfigure-servers:
                      action: haproxy.reconfigure-servers
                      precedingPhases: [ deploy-war ]
                      phase: lb-reconfigure-servers
                      parameters:
                        commandCallTimeout: 10 minutes
                        app-hosts: "{$.props.tomcat.app-hosts}"
                        app-port: "{$.props.tomcat.app-port}"
                        lb-bucket: "http://roundrobin:80/"
              rebuild-app:
                steps:
                  - get-env-props:
                      action: getEnvironmentProperties
                      phase: get-env-props
                      output:
                        props: result
                  - build-app:
                      action: tomcat.build-app
                      precedingPhases: [ get-env-props ]
                      parameters:
                        commandCallTimeout: 10 minutes
                        scm-provider: "{$.scm-provider}"
                        git-uri: "git://github.com/{$.app-fork}/starter-java-web.git"
                        app-branch: "{$.app-branch}"
                      output:
                        warlist: wars
                  - deploy-libs:
                      action: tomcat.deploy-libs
                      phase: deploy-libs
                      precedingPhases: [ get-env-props, build-app ]
                      parameters:
                        commandCallTimeout: 5 minutes
                        lib-uri: "{$.lib-uri}"
                  - deploy-war:
                      action: tomcat.deploy-war
                      phase: deploy-war
                      precedingPhases: [ build-app, deploy-libs ]
                      parameters:
                        commandCallTimeout: 5 minutes
                        uri: "{$.warlist[0]}"
                        path: "/"
                        context-attrs: {
                          "docBase": "{$.warlist[0]}",
                          "path": "/",
                          "debug": "5",
                          "reloadable": "true",
                          "crossContext": "true",
                          "allowLinking": "true"
                        }
                        context-nodes:
                          - Environments: {
                              "name": "appEnvironment",
                              "value": "_default",
                              "type": "java.lang.String",
                              "override": "false"
                          }
                          - Resource: {
                              "name": "jdbc/datasource",
                              "auth": "Container",
                              "type": "{$.mysql-con.db-dstype}",
                              "maxActive": "8",
                              "maxIdle": "8",
                              "maxWait": "-1",
                              "username": "{$.mysql-con.db-user}",
                              "password": "{$.mysql-con.db-user-password}",
                              "driverClassName": "{$.mysql-con.db-driver}",
                              "url": "{$.mysql-con.connection-url}",
                              "validationQuery": "{$.mysql-con.validation-query}",
                              "testOnReturn": "true",
                              "testWhileIdle": "true"
                          }

    Database:
      type: reference.Submodule
      configuration:
        #__locator.application-id: "MySQL Server"
        #__locator.application-id: "Oracle DBxe"
        __locator.application-id: "Database"
      interfaces:
        input:
          db-port:
              type: configuration(int)
              name: Database port
          db-root-password:
              type: configuration(string)
              name: Database root password
        mysql:
          schema:
              type: receive-command(string db-user, string db-user-password, list<string> db-user-privileges => object connection)
              name: Manage schema
          file-query:
              type: receive-command(list<string> sql-url, object connection)
              name: Run a SQL query
          dbms:
              type: publish-signal(object)
              name: Database parameters
          db-host:
              type: publish-signal(string)
              name: Database host
          db-port:
              type: publish-signal(int)
              name: Database port

    AppServer:
      type: reference.Submodule
      configuration:
        __locator.application-id: "Application Server"
      interfaces:
        input:
          operating-system:
              type: configuration(map<string,object>)
              suggestions:
                  "centos": {image: "us-east-1/ami-bf5021d6", identity: root}
                  "amazon": {image: "us-east-1/ami-1ba18d72", identity: ec2-user}
                  "ubuntu1204": {image: "us-east-1/ami-86452990", identity: ubuntu}
                  "ubuntu1004": {image: "us-east-1/ami-9f3906f6", identity: ubuntu}
          instance-size:
              type: configuration(string)
              name: EC2 instance type
          quantity:
              type: configuration(int)
              name: No. application hosts
        tomcat:
          build-app:
              type: receive-command(string scm-provider, string git-uri, string app-branch => list<string> wars)
              name: Maven build
          deploy-libs:
              type: receive-command(list<string> lib-uri)
              name: Deploy libs
          deploy-war:
              type: receive-command(string uri, string path, object context-attrs, object context-nodes)
              name: Deploy a war/jar
          reconfigure:
              type: receive-command(string java-opts)
              name: Reconfigure tomcat
          manage-service:
              type: receive-command(string service-action)
              name: Manage service
          app-hosts:
              type: publish-signal(list<string>)
              name: Application hosts
          app-port:
              type: publish-signal(int)
              name: Application port

    LoadBalancer:
      type: reference.Submodule
      configuration:
        __locator.application-id: "Load Balancer"
      interfaces:
        haproxy:
          add-servers:
              type: receive-command(list<string> app-hosts, int app-port, string lb-bucket => string entry-url)
              name: Add servers
          reconfigure-servers:
              type: receive-command(list<string> app-hosts, int app-port, string lb-bucket)
              name: Reconfigure servers
          lb-stats:
              type: publish-signal(object)
              name: HAProxy statistics

